<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构：链表</title>
    <link href="undefined2019/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%93%BE%E8%A1%A8/"/>
    <url>2019/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="关于链表"><a href="#关于链表" class="headerlink" title="关于链表"></a>关于链表</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>链表是一种将数据存储到“结点”中的数据结构，需要存储多少个数据，就生成多少个“结点”，把这些“结点”用指针挂接起来。<br>为了表示每个数据元素ai与其直接后继元素ai+1之间的逻辑关系，对数据元素ai来说，除了存储其本身的信息之外，还需存储一个指示其直接后继的信息(即直接后继的存储位置)，这两部分信息组成数据元素ai的存储映像，称为结点。<br>结点中包括两个域，其中存储数据元素信息的域称为数据域；存储直接后继存储位置的域称为指针域。指针域中存储的信息称为指针。</p></blockquote><p>这些是书上的概念</p><p>简单来说就是，定义一个结构体</p><pre><code>struct LinkNode{    int data; //此处为数据域    struct LinkNode *next //此处为指针域};</code></pre><p>一个链表由头，结点和尾组成</p><p>其实这个头就是指向第一个结点的指针，最后的尾则是最后一个结点的指向的下一个地址为 <code>NULL</code></p><p><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike72%2C5%2C5%2C72%2C24/sign=0dfd76b003087bf469e15fbb93ba3c49/91ef76c6a7efce1b8d7e8131ae51f3deb58f65f7.jpg" srcset="/img/loading.gif" alt="LinkNode"></p><p><del>百度百科的图蛮好的</del></p><p>其实就是这玩意</p><p>这个是单向链表，除此之外常见的还有</p><ul><li>双向链表<ul><li>每个结点中保存了上一个结点的地址<code>*prev</code></li></ul></li><li>单向循环链表<ul><li>最后一个结点的<code>*next</code>指向头</li></ul></li><li>双向循环链表<ul><li>最后一个结点的<code>*next</code>指向头，每个结点中保存了上一个结点的地址<code>*prev</code></li></ul></li></ul><h2 id="对链表的操作"><a href="#对链表的操作" class="headerlink" title="对链表的操作"></a>对链表的操作</h2><h3 id="插入新结点"><a href="#插入新结点" class="headerlink" title="插入新结点"></a>插入新结点</h3><p>利用<code>malloc()</code>动态申请内存作为新结点插入到链表中</p><p>例如：</p><pre><code>struct ListNode *add;add = (struct ListNode *)malloc(sizeof(struct ListNode));</code></pre><p>可以生成一个新结点，在生成后可对该新节点的数据域进行赋值操作，并插入链表中</p><p>一般来说，对单链表插入新结点有三种方法<br><img src="https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=4eaa9bce728da9775a228e79d138937c/b3b7d0a20cf431adcfd51bc44a36acaf2fdd98c3.jpg" srcset="/img/loading.gif" alt="insert"></p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>例题：列表拼接（来源：<a href="https://www.pintia.cn" target="_blank" rel="noopener">PTA|程序设计类实验辅助教学平台</a>）</p><p>本题要求实现一个合并两个有序链表的简单函数。链表结点定义如下：</p><pre><code>struct ListNode {    int data;    struct ListNode *next;};</code></pre><p><strong>函数接口定义：</strong></p><pre><code>struct ListNode *mergelists(struct ListNode *list1, struct ListNode *list2);</code></pre><p>其中list1和list2是用户传入的两个按data升序链接的链表的头指针；函数mergelists将两个链表合并成一个按data升序链接的链表，并返回结果链表的头指针。</p><p><strong>裁判测试程序样例：</strong></p><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;struct ListNode {    int data;    struct ListNode *next;};struct ListNode *createlist(); /*裁判实现，细节不表*/struct ListNode *mergelists(struct ListNode *list1, struct ListNode *list2);void printlist( struct ListNode *head ){     struct ListNode *p = head;     while (p) {           printf(&quot;%d &quot;, p-&gt;data);           p = p-&gt;next;     }     printf(&quot;\n&quot;);}int main(){    struct ListNode  *list1, *list2;    list1 = createlist();    list2 = createlist();    list1 = mergelists(list1, list2);    printlist(list1);    return 0;}/* 你的代码将被嵌在这里 */</code></pre><p><strong>输入样例：</strong></p><pre><code>1 3 5 7 -12 4 6 -1</code></pre><p><strong>输出样例：</strong></p><pre><code>1 2 3 4 5 6 7 </code></pre><p><strong>我写的createlist()：</strong></p><pre><code></code></pre><p><strong>我的答案：</strong></p><pre><code>struct ListNode *mergelists(struct ListNode *list1, struct ListNode *list2){    if (list1 == NULL)    {        return list2;    }    if (list2 == NULL)    {        return list1;    }    struct ListNode *checkpoint, *add, *last;    while (list2 != NULL)    {        add = list2;        list2 = list2-&gt;next;        if (add-&gt;data &lt; list1-&gt;data)        {            add-&gt;next = list1;            list1 = add;            continue;        }        checkpoint = list1;        while(checkpoint!=NULL)        {            if(checkpoint-&gt;next==NULL)            {                checkpoint-&gt;next = add;                add-&gt;next = NULL;                break;            }            if(checkpoint-&gt;next-&gt;data&gt;add-&gt;data)            {                add-&gt;next=checkpoint-&gt;next;                checkpoint-&gt;next = add;                break;            }            checkpoint=checkpoint-&gt;next;        }    }    return list1;}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>技术 ACM 算法 数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="undefined2019/12/hello-world/"/>
    <url>2019/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>用 Markdown 编写博客</title>
    <link href="undefined2019/11/%E7%94%A8Markdown%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <url>2019/11/%E7%94%A8Markdown%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="用-Markdown-编写博客"><a href="#用-Markdown-编写博客" class="headerlink" title="用 Markdown 编写博客"></a>用 Markdown 编写博客</h1><pre><code>用 Hexo 生成的博客用Markdown语法来编写，还需要一个Markdown编辑器。</code></pre><h2 id="1-Markdown-语法编辑器"><a href="#1-Markdown-语法编辑器" class="headerlink" title="1. Markdown 语法编辑器"></a>1. Markdown 语法编辑器</h2><p>最近很多人都在使用 VSC 来搭配插件编写 Markdown 文件。打开 VSC，安装相关插件 <code>Markdown All in One</code></p><p><img src="https://i.loli.net/2019/11/03/yBdH21sqXcITYZ7.png" srcset="/img/loading.gif" alt="screenshot4.png"></p><p>安装后在 VSC 就可以使用 Markdown 编辑器和效果预览。</p><p><img src="https://i.loli.net/2019/11/07/DmCwdgbpE82SXoO.png" srcset="/img/loading.gif" alt="screenshot5.png"></p><p>单击红圈处可以看到 Markdown 页面的实时预览。</p><h2 id="2-Markdown-语法"><a href="#2-Markdown-语法" class="headerlink" title="2. Markdown 语法"></a>2. Markdown 语法</h2><ul><li>第一项</li><li>第二项</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>折腾</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo编写博客并修改主题</title>
    <link href="undefined2019/11/%E8%87%AA%E5%AE%9A%E4%B9%89Hexo%E4%B8%BB%E9%A2%98/"/>
    <url>2019/11/%E8%87%AA%E5%AE%9A%E4%B9%89Hexo%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo编写博客并修改主题"><a href="#Hexo编写博客并修改主题" class="headerlink" title="Hexo编写博客并修改主题"></a>Hexo编写博客并修改主题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先前的文章已经提到了如何配置Hexo并且上传到Github</p><p><a href="http://blog.lancel0t.online/2019/11/Hexo%20+%20GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">Hexo + GitHub搭建博客</a></p><p>现在来讲讲怎么写博客</p><h2 id="1-生成文章"><a href="#1-生成文章" class="headerlink" title="1. 生成文章"></a>1. 生成文章</h2><h3 id="1-1-新建文章"><a href="#1-1-新建文章" class="headerlink" title="1.1 新建文章"></a>1.1 新建文章</h3><p>进入Hexo的工作文件夹</p><pre><code>hexo n &quot;文章标题&quot;</code></pre><h3 id="1-2-编辑文章"><a href="#1-2-编辑文章" class="headerlink" title="1.2 编辑文章"></a>1.2 编辑文章</h3><p>完成后会生成 <strong>./source/_post/文章标题.md</strong></p><p>文件内容为</p><pre><code>---title: 文章标题date: 2019-11-02 16:50:27tags: ---</code></pre><p>用自己喜欢的Markdown编辑器就可以编辑了，保存后可以用</p><pre><code>hexo s</code></pre><p>在 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 看到预览效果</p><h2 id="2-修改主题"><a href="#2-修改主题" class="headerlink" title="2. 修改主题"></a>2. 修改主题</h2><p>自动生成的博客自带了一个名为 <strong>landscape</strong> 的主题。如果觉得自带主题的效果还不错的话直接用就可以了，当然如果想要更好看的博客还需要自己修改主题</p><h3 id="2-1-下载主题"><a href="#2-1-下载主题" class="headerlink" title="2.1 下载主题"></a>2.1 下载主题</h3><p>在Hexo官方网站上就有很多很不错的主题了</p><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes | Hexo</a></p><p>我在这个博客用的主题是</p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid" target="_blank" rel="noopener">fluid-dev/hexo-theme-fluid</a> </p><p>🌊 一款 Material Design 风格的 Hexo 主题 / An elegant Material-Design theme for Hexo </p><p>在<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases" target="_blank" rel="noopener">此处</a>下载最新主题</p><h3 id="2-2-部署主题"><a href="#2-2-部署主题" class="headerlink" title="2.2 部署主题"></a>2.2 部署主题</h3><p>下载后解压，把文件夹名称改成fluid</p><p>文件夹内容应为</p><pre><code>Changelog.md  README.md     _config.yml         languages  pages    source  LICENSE       README_en.md  _static_prefix.yml  layout     scripts</code></pre><h3 id="2-3-应用主题"><a href="#2-3-应用主题" class="headerlink" title="2.3 应用主题"></a>2.3 应用主题</h3><p>打开工作文件夹下的 <strong>_config.yml</strong> </p><pre><code># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: fluid</code></pre><p>将此处修改为 <strong>theme: fluid</strong> ，保存并刷新后即可在 <strong><a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></strong> 看到预览效果。</p><h2 id="3-自定义博客"><a href="#3-自定义博客" class="headerlink" title="3. 自定义博客"></a>3. 自定义博客</h2><h3 id="3-1-修改博客信息"><a href="#3-1-修改博客信息" class="headerlink" title="3.1 修改博客信息"></a>3.1 修改博客信息</h3><p>打开工作文件夹下的 <strong>./_config.yml</strong> 里边可以修改一些博客的自定义参数</p><p>例如：</p><pre><code># Sitetitle: Virtualitysubtitle: Lancel0t🍆写字的地方description: 用Hexo搭建的博客，托管于GitHubkeywords:author: Lancel0t🍆language: zh-CNtimezone:</code></pre><p>此处可以修改博客站点的标题、副标题、描述、关键词、作者和语言时区，其它的选项同理。我们主要需要修改 <strong># Site</strong> 部分的内容。</p><p>其它大部分保持默认就能直接用了。</p><h3 id="3-2-修改主题选项"><a href="#3-2-修改主题选项" class="headerlink" title="3.2 修改主题选项"></a>3.2 修改主题选项</h3><p>安装好主题并成功在预览页面看到后，可以到工作文件夹下的 <strong>./theme/fluid/</strong> 下修改 <strong>_config.yml</strong> </p><p>本次实例使用的fluid主题在 <strong>_config.yml</strong> 中详细对各个选项进行了注释，大家根据注释按需修改即可。</p><p>==Highlight==</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>折腾</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + GitHub搭建博客</title>
    <link href="undefined2019/11/Hexo%20+%20GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>2019/11/Hexo%20+%20GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-GitHub搭建博客"><a href="#Hexo-GitHub搭建博客" class="headerlink" title="Hexo + GitHub搭建博客"></a>Hexo + GitHub搭建博客</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在阿里云买了一个10元一个月的学生机，用WordPress搭了一个博客。但是后来想想还是没必要花这个钱，还是用Hexo来生成博客，放到GitHub上比较省钱。</p><p><del>毕竟这样一分钱也不花</del></p><h2 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1. 安装Hexo"></a>1. 安装Hexo</h2><h3 id="1-1-安装环境"><a href="#1-1-安装环境" class="headerlink" title="1.1 安装环境"></a>1.1 安装环境</h3><pre><code>bash</code></pre><pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y sudo apt install node npm git -y</code></pre><p>用以上的命令来更新系统并安装NodeJS、 npm和git bash。</p><h3 id="1-2-在wsl中安装Hexo"><a href="#1-2-在wsl中安装Hexo" class="headerlink" title="1.2 在wsl中安装Hexo"></a>1.2 在wsl中安装Hexo</h3><pre><code>npm install -g hexo-cli</code></pre><p><em>注意：npm中还同时存在hexo模块，但不包含hexo server命令，在之后的直接渲染测试中会无法使用hexo s</em></p><h3 id="1-3-创建工作目录并初始化"><a href="#1-3-创建工作目录并初始化" class="headerlink" title="1.3 创建工作目录并初始化"></a>1.3 创建工作目录并初始化</h3><p>以下在家目录中创建一个名为hexo的文件夹作为工作目录并初始化</p><pre><code>mkdir ~/hexocd ~/hexohexo init</code></pre><p>期间hexo会从github下载并自动创建必须的目录结构，并且安装npm插件。过程中可能出现网络缓慢的问题，需要科学上网。</p><p>结束后hexo会列出所有的组件和版本号</p><pre><code>hexo s</code></pre><p>在工作文件夹中运行以上命令，hexo会在本地地址 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 创建一个http服务器，直接用浏览器打开就能看到博客的效果了。</p><p>如果出现无法打开4000端口的情况可以参照这篇文章：<br><a href="http://blog.liuxianan.com/windows-port-bind.html" target="_blank" rel="noopener">http://blog.liuxianan.com/windows-port-bind.html</a></p><h2 id="2-创建GitHub仓库"><a href="#2-创建GitHub仓库" class="headerlink" title="2. 创建GitHub仓库"></a>2. 创建GitHub仓库</h2><h3 id="2-1-注册GitHub账号"><a href="#2-1-注册GitHub账号" class="headerlink" title="2.1 注册GitHub账号"></a>2.1 注册GitHub账号</h3><p>直接打开 <a href="https://www.github.com" target="_blank" rel="noopener">GitHub</a>，填写好自己的信息就可以注册了</p><p><img src="https://i.loli.net/2019/11/01/O3RLwkrtIdJZhEn.png" srcset="/img/loading.gif" alt="批注 2019-11-01 225624.png"></p><h3 id="2-2-创建GitPages"><a href="#2-2-创建GitPages" class="headerlink" title="2.2 创建GitPages"></a>2.2 创建GitPages</h3><p><img src="https://i.loli.net/2019/11/01/SnbT8CfIpwVXulW.png" srcset="/img/loading.gif" alt="screenshot2.png"></p><p>此处创建一个用来存放网站的Git仓库</p><p><strong>注意：此处的仓库名一定为 你的名字.github.io</strong></p><p><strong>否则无法直接在浏览器中访问</strong></p><h3 id="2-3-创建SSH-Key"><a href="#2-3-创建SSH-Key" class="headerlink" title="2.3 创建SSH Key"></a>2.3 创建SSH Key</h3><p>虽然可以直接用用户名和密码来提交网页到Github，但是为了安全还是选择使用SSH key</p><pre><code>cd ~/.sshls</code></pre><p>进入家目录中查看本地是否有已经生成的ssh key</p><p>如果没有文件，则自己生成</p><pre><code>ssh-keygen -t rsa -C &quot;邮件地址&quot;</code></pre><p>根据终端提示操作后会生成 <strong>~/.ssh/id_rsa.pub</strong> 文件，用记事本打开，复制内容</p><p>打开Github -&gt; 个人设置 -&gt; Setting -&gt; SSH and GPG keys -&gt; Add New SSH key</p><p>Title 可以自己填写，把<strong>id_rsa.pub</strong>的内容复制到Key里边</p><p><img src="https://i.loli.net/2019/11/01/E6JyBokHt3pPSXa.png" srcset="/img/loading.gif" alt="screenshot3.png"></p><p>提交之后等待一段时间，在wsl终端中执行</p><pre><code>ssh git@github.com -T</code></pre><p>若有回显</p><pre><code>Hi YourName! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>说明你的SSH Key生效</p><p>继续在终端中执行</p><pre><code>git config --global user.name &quot;YourName&quot;// 你的github用户名git config --global user.email  &quot;example@example.com&quot;// 你的github注册邮箱</code></pre><h2 id="3-将页面提交到Github"><a href="#3-将页面提交到Github" class="headerlink" title="3. 将页面提交到Github"></a>3. 将页面提交到Github</h2><h3 id="3-1-更改Hexo配置文件"><a href="#3-1-更改Hexo配置文件" class="headerlink" title="3.1 更改Hexo配置文件"></a>3.1 更改Hexo配置文件</h3><p>首先，在确认SSH key已经正确配置的情况下，在Hexo的工作文件夹中打开 <strong>_config.yml</strong> ，找到depoly部分，如下修改</p><pre><code>deploy:  type: git  repository: git@github.com:YourName/YourName.github.io.git  branch: master</code></pre><h3 id="3-2-安装hexo-deployer-git"><a href="#3-2-安装hexo-deployer-git" class="headerlink" title="3.2 安装hexo-deployer-git"></a>3.2 安装hexo-deployer-git</h3><pre><code>npm install hexo-deployer-git --save</code></pre><p>安装这个插件后，执行</p><pre><code>hexo clean &amp;&amp; hexo g -d</code></pre><p>就能直接将生成的页面提交到Github，过几分钟后访问 YourName.github.io 就能看到你的博客啦</p><p>关于如何在Hexo中写博客和修改主题配置之类的东西，之后有时间再写另外一篇吧</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>折腾</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>